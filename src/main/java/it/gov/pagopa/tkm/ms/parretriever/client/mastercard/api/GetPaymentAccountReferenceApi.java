/*
 * Payment Account Reference Inquiry API
 * Merchants, Acquirers, or Digital Activity Customers (DACs) can use this service to query the PAR Vault to obtain a Payment Account Reference(PAR), from a Primary Account Number (PAN). PAR provides an industry-aligned approach designed to help link PAN-based transactions to transactions using associated payment tokens, without using the PAN as the linkage mechanism.
 *
 * The version of the OpenAPI document: 1.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.gov.pagopa.tkm.ms.parretriever.client.mastercard.api;

import it.gov.pagopa.tkm.ms.parretriever.client.mastercard.api.util.ApiCallback;
import it.gov.pagopa.tkm.ms.parretriever.client.mastercard.api.util.ApiClient;
import it.gov.pagopa.tkm.ms.parretriever.client.mastercard.api.util.ApiException;
import it.gov.pagopa.tkm.ms.parretriever.client.mastercard.api.util.ApiResponse;
import it.gov.pagopa.tkm.ms.parretriever.client.mastercard.api.util.Configuration;
import it.gov.pagopa.tkm.ms.parretriever.client.mastercard.api.util.Pair;

import com.google.gson.reflect.TypeToken;


import it.gov.pagopa.tkm.ms.parretriever.client.mastercard.api.model.GetPaymentAccountReferenceRequest;
import it.gov.pagopa.tkm.ms.parretriever.client.mastercard.api.model.GetPaymentAccountReferenceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GetPaymentAccountReferenceApi {
    private ApiClient localVarApiClient;

    public GetPaymentAccountReferenceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GetPaymentAccountReferenceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getPaymentAccountReferencePost
     * @param getPaymentAccountReferenceRequest Contains the details of the get PAR API request message. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the get PAR API response message. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful requests will return an Error Response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentAccountReferencePostCall(GetPaymentAccountReferenceRequest getPaymentAccountReferenceRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getPaymentAccountReferenceRequest;

        // create path and map variables
        String localVarPath = "/getPaymentAccountReference";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentAccountReferencePostValidateBeforeCall(GetPaymentAccountReferenceRequest getPaymentAccountReferenceRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getPaymentAccountReferencePostCall(getPaymentAccountReferenceRequest, _callback);
        return localVarCall;

    }

    /**
     * Submit an encrypted PAN to obtain the PAR linked to the account.
     * The API performs a PAR query into the PAR Vault with the supplied PAN. When a PAR is returned from the PAR vault the API will encrypt it using the wrapped encryption method with the Mastercard Customer\\&#39;s Encryption Public Key and include it in the API response. 
     * @param getPaymentAccountReferenceRequest Contains the details of the get PAR API request message. (optional)
     * @return GetPaymentAccountReferenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the get PAR API response message. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful requests will return an Error Response object. </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentAccountReferenceResponse getPaymentAccountReferencePost(GetPaymentAccountReferenceRequest getPaymentAccountReferenceRequest) throws ApiException {
        ApiResponse<GetPaymentAccountReferenceResponse> localVarResp = getPaymentAccountReferencePostWithHttpInfo(getPaymentAccountReferenceRequest);
        return localVarResp.getData();
    }

    /**
     * Submit an encrypted PAN to obtain the PAR linked to the account.
     * The API performs a PAR query into the PAR Vault with the supplied PAN. When a PAR is returned from the PAR vault the API will encrypt it using the wrapped encryption method with the Mastercard Customer\\&#39;s Encryption Public Key and include it in the API response. 
     * @param getPaymentAccountReferenceRequest Contains the details of the get PAR API request message. (optional)
     * @return ApiResponse&lt;GetPaymentAccountReferenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the get PAR API response message. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful requests will return an Error Response object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPaymentAccountReferenceResponse> getPaymentAccountReferencePostWithHttpInfo(GetPaymentAccountReferenceRequest getPaymentAccountReferenceRequest) throws ApiException {
        okhttp3.Call localVarCall = getPaymentAccountReferencePostValidateBeforeCall(getPaymentAccountReferenceRequest, null);
        Type localVarReturnType = new TypeToken<GetPaymentAccountReferenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit an encrypted PAN to obtain the PAR linked to the account. (asynchronously)
     * The API performs a PAR query into the PAR Vault with the supplied PAN. When a PAR is returned from the PAR vault the API will encrypt it using the wrapped encryption method with the Mastercard Customer\\&#39;s Encryption Public Key and include it in the API response. 
     * @param getPaymentAccountReferenceRequest Contains the details of the get PAR API request message. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the get PAR API response message. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful requests will return an Error Response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentAccountReferencePostAsync(GetPaymentAccountReferenceRequest getPaymentAccountReferenceRequest, final ApiCallback<GetPaymentAccountReferenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentAccountReferencePostValidateBeforeCall(getPaymentAccountReferenceRequest, _callback);
        Type localVarReturnType = new TypeToken<GetPaymentAccountReferenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
